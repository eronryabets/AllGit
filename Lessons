http://ps.readthedocs.io/ru/latest/strings.html
https://pythonworld.ru/osnovy/vstroennye-funkcii.html Встроенные функции
https://docs.python.org/3/library/functions.html#globals Built-in Functions

https://pythonworld.ru/tipy-dannyx-v-python/vse-o-funkciyax-i-ix-argumentax.html функции
https://pythonworld.ru/osnovy/rabota-s-modulyami-sozdanie-podklyuchenie-instrukciyami-import-i-from.html модули

https://pythonworld.ru/osnovy/rabota-s-modulyami-sozdanie-podklyuchenie-instrukciyami-import-i-from.html модули
http://pythonicway.com/python-modules модули
---------------------------
module os
https://pythonworld.ru/moduli/modul-os-path.html
https://pythonworld.ru/moduli/modul-os.html
http://www.ilnurgi1.ru/docs/python/modules/ospath.html

http://www.ilnurgi1.ru/docs/python/modules/os.html?highlight=os.name#os.name
https://www.tutorialspoint.com/python/os_access.htm с примерами

http://younglinux.info/python/arguments.php аргументы и параметры
https://pythonworld.ru/moduli/modul-math.html модуль math
======================================
current = 14:00
time_hours = 51
#сколько будет если курент сложить с таймером
#14+51 = 65 % 24
======================================
"""В строке "поля для замены" заключаются в фигурные скобки {}. Все, что не заключено в скобки,
воспринимается как обычный текст, которые копируется в неизменном виде. Чтобы передать в тексте
символы фигурных скобок, их дублируют: {{ и }}"""
#print('{},{}'.format(prefix, name))
#format(prefix, name)) - переменные
# колво скобок слева - должны соответствовать аргументам (как тут, префикс, нейм)

""" 'Words' .format(x) - У обьекта строка - есть метод форматирования. 'Word{}' формат пытается оригинальные скобки что бы
поставить свои значения """

#'{}***{}'.format
#prefix = 'Привет, '
#name = input('Введите свое имя: ')
#print('{} вставляет символ, или слово между Hi и input_name {}'.format(prefix, name))
#print('{} :) {}'.format(prefix, name+'!')) #Привет, странное у тебя имя - asd!

prefix = 'Привет, '
name = input('Введите свое имя: ')
print('{} :) {}'.format(prefix, name+'!'))  #Привет,  :) Asder!
# '{}{}'.format колво {} должны соответствовать переменным справа (prefix, name)
# смайлик в этих скобках будет написан в выводе между нашими переменными
========================

print('first text')
#идет обьявление функции
def print_hello():
	print("Hello World")
#телло функции закончено
print('second text')
#print_hello()
====================
def print_hello():
	print ("hello ", end=" ")
	print("hello ")

def get_name():
	name = input("Enter your name: ")
	print_hello(),
	print(name)

get_name()
======================

x = 42
y = x

print(y)

del x

#print(x)
#print(y)

========================

#s = input()
#max - встроенная функция
#print(max(s))

s = "abc"
print (max(s))
======
def get_max_char(s):
	print(max(s))

s = input()

get_max_char(S)

=========================

def get_max_char(x):
	y = x
	print(max(y))

s = input()

get_max_char(S)
# переменная y - локальна, видна только в теле функции
========================

def get_max_char(x):
	y = x
	print(max(y))

s = input()

get_max_char(S)

def get_max_char(x):
	y = x
	print(max(y))

s = input()
y = 1
print(y) #два разных Y

get_max_char(S)

====================


def get_max_char(x, z):
	y = x
	print(max(y))

s = input()
y = 1

get_max_char(s, y)
get_max_char(z = y, x = s)

=====================

def get_max_char(x = "bcd"):
	print(max(x))

s = "abc"

get_max_char(s)
get_max_char()

========================

def f():
	pass # pass - используеться для заглушек, ибо пустую функцию написать нельзя

=========================

x = 42

def f():
	# TODO - ключевое слово - что бы "сделать потом"

===================
# работа с возвращаемыми значениям

def get_max_char(x = "bcd"):
#	print(max(x))
    return max(x) # возвращение знач.



s = "abc"

ret = get_max_char
print(ret)

#None - говорит что данных нет
# это не ноль, это не пусто...
# ответ С - так как задали аргумент Эс

===================================

#import - подключение модуля
# должен отдилятся двумя пустыми строчками
#import random
#help(random)
#print(random.randint(1, 6))
#module.method - module_name.method_name
#x = 7
#x % 6
#print(x % 6)

#prefix = "Hi, "
prefix = "Hi"
name = input ('Please, enter a name')
#print("Hi ", name)
#print('Hi, ', name, sep='')
#print(prefix + name)
# plus для формирования строк некогда не используется
print('{},{}'.format(prefix, name))
#format(prefix, name)) - переменные
# колво скобок слева - должны соответствовать аргументам (как тут, префикс, нейм)

=================================================
#пример 3+

Программа состоит из
[/input/] клавиатура - [/\блок условного выполнени\/ ]ромбик - -[|atiphetics|] вычисление x + y -
- [/output/] монитор, или печать - вывод данных
Спомощью них можно описать выполнение любой программы и т.д.

Расмотрим логические операторы -
к ним относятся операторы -

if - ему нужно выражение - оно должно быть булдевое значение  True или Folse
для получения данных значений - есть логические операторы
логические операторы - результатом работы которых являеться булевое значнеие либо 0 либо 1
к таким операторам относятся
==   5 == 5   True
>
<
>=
<=

==================
пример 6
True ето все что не ноль
False - ноль и None

==================================================================================
ЛЕКЦИЯ 5
==================================================================================

Лекция 6

numpy - matri4noe is4islenie
