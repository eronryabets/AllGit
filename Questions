#Вопросы
def printTwice(bruce):
  print(bruce, bruce)
 printTwice(bruce)

 что это за (bruce) ? в верху функции

 Ответ
 def имя функции ( ):
     тело функции отделеная отступами
 функцию можно передавать и получать ответ, в скобках - можно передавать, в скобках - аргумент функции
 если ей нужны данные - то они передаются в круглых скобках,
#================================
def catTwice(part1, part2):
  cat = part1 + part2
  printTwice(cat)

#========================

def add(x, y):
    return x + y

print(add(1, 20))

#=============================

def func(*args):
    return args

#Функция также может принимать переменное количество позиционных аргументов, тогда перед именем ставится *:
# Не поенял, что делает *args

#==========================

#lambda функции, в отличие от обычной, не требуется инструкция return, а в остальном, ведет себя точно так же:

func = lambda *args: args
func(1, 2, 3, 4)
(1, 2, 3, 4)

#==========================

Операции на месте (in-Place)

x=2
x+=3
print(x) #5

#смысл такой записи не понятен? чем такой не угодил x = 2 + 3 = 5????
ответ - очень часто необходимо изменить теекущее значение переменной на одну величину
Х нужно получсить 2 - 4 - 8
х = 2
нам над прибавить 2
х = х +  2

#==========================


#pass keyword Используется в случае, когда нужно объявить тело пустого блока

def foo():
    # The empty body of function
    pass

#=================================
pydoc time нельзя вызвать, над в линухе проверить
help('time')

#=================================

os.uname() - информация об ОС. возвращает объект с атрибутами:
sysname - имя операционной системы, nodename - имя машины в сети
(определяется реализацией), release - релиз, version - версия, machine - идентификатор машины.
*как правильно написать то?
==========================================================

def dirname():
    import os
    print("Файлы и папки дирректории : ", os.listdir('.'))
    return os.listdir('.')

print(dirname())

*обьяснить про логику ретурна
*что тут в скобках нужно ставить def dirname(????) ?
============================================================

# Type your code here
i = 3
j = 3
print  id(i)
print  id(j)
j = j + 1
print hex(id(j))

"""
hex преобразует целое число в строчную шестнадцатеричную строку с префиксом «0x»

a = 5
b = 5.0

print(5, 5.0)
print("id:", "\na:", id(a), "\nb:", id(b))
print("hex", "\na:", hex(a), "\nb:", float.hex(b))
print(int(0x5)) #преобразования шестнадцатеричной строки в целое число
=====================
a = 5
print(a) #a
print(id(a)) #501392608
print(hex(a)) #0x5
print(hex(id(a))) #0x1de2a4e0
print(int(0x5)) #5
print(int(0x1de2a4e0)) #501392608 если заИнтить Хексовое значение, то вернеться ИД

#как узнать по ID какому именно обьекту он пренадлежит?

"""
ответ - 1) list vars 2) for v in vars
получив ИД етой переменной мы сравним с известной нам переменной, и если они совпадут - и тогда узнаем ету переменную.
Б
===
байт делится на тетраду, и одна тетрада ето одна 16и ричная цифра
====

"""
def f():
    x = 42
    #return x
print(f())

Функция в оприоре должна что то вернуть, если ретурн не задан она вернет None

"""